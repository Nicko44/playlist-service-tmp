security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory:
            memory:
                users:
                    '%env(resolve:API_TOKEN)%': { password: '%env(resolve:API_TOKEN)%', roles: ['ROLE_SERVICE'] }
        jwt_provider:
            id: App\Security\JwtUserProvider

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        jwt:
            pattern: ^/v2
            custom_authenticators:
                - App\Security\JwtAuthenticator
            stateless: true
            provider: jwt_provider
        main:
            custom_authenticators:
                - App\Security\ApiKeyAuthenticator
            lazy: true
            provider: users_in_memory


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/v1/channels, roles: ROLE_SERVICE }
        - { path: ^/v1/categories, roles: ROLE_SERVICE }
        - { path: ^/v1/logos, roles: ROLE_SERVICE }
        - { path: ^/v1/rules, roles: ROLE_SERVICE }
        - { path: ^/v1/access, roles: ROLE_SERVICE }
        - { path: ^/v2/search, roles: ROLE_USER }
        - { path: ^/v2/playlist/json, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
